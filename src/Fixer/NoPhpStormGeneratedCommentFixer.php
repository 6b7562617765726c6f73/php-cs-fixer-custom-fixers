<?php

declare(strict_types = 1);

namespace PhpCsFixerCustomFixers\Fixer;

use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;

final class NoPhpStormGeneratedCommentFixer extends AbstractFixer
{
    public function getDefinition() : FixerDefinition
    {
        return new FixerDefinition(
            'There must be no comment generated by PhpStorm.',
            [new CodeSample('<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 01.01.70
 * Time: 12:00
 */
namespace Foo;
')]
        );
    }

    public function isCandidate(Tokens $tokens) : bool
    {
        return $tokens->isAnyTokenKindsFound([T_COMMENT, T_DOC_COMMENT]);
    }

    public function fix(\SplFileInfo $file, Tokens $tokens) : void
    {
        foreach ($tokens as $index => $token) {
            if (!$token->isGivenKind([T_COMMENT, T_DOC_COMMENT])) {
                continue;
            }

            if (\preg_match('/\*\h+Created by PhpStorm/i', $token->getContent(), $matches) !== 1) {
                continue;
            }

            $this->removeTrailingHorizontalWhitespaces($tokens, $index - 1);

            $this->removeLeadingNewline($tokens, $index + 1);

            $tokens->clearTokenAndMergeSurroundingWhitespace($index);
        }
    }

    public function getPriority() : int
    {
        return 0;
    }

    private function removeTrailingHorizontalWhitespaces(Tokens $tokens, int $index) : void
    {
        if (!$tokens[$index]->isGivenKind(T_WHITESPACE)) {
            return;
        }

        $newContent = \preg_replace('/\h+$/', '', $tokens[$index]->getContent());

        if (empty($newContent)) {
            $tokens->clearAt($index);

            return;
        }

        if ($newContent === $tokens[$index]->getContent()) {
            return;
        }

        $tokens[$index] = new Token([T_WHITESPACE, $newContent]);
    }

    private function removeLeadingNewline(Tokens $tokens, int $index) : void
    {
        if (!$tokens[$index]->isGivenKind(T_WHITESPACE)) {
            return;
        }

        $newContent = \preg_replace('/^\h*\R/', '', $tokens[$index]->getContent());

        if ($newContent === $tokens[$index]->getContent()) {
            return;
        }

        if (empty($newContent)) {
            $tokens->clearAt($index);

            return;
        }

        $tokens[$index] = new Token([T_WHITESPACE, $newContent]);
    }
}
